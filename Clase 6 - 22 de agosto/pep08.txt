Diseño del código
Se definen las claves de cómo debería de escribirse el código Pythónico en sí,
definiendo conceptos como la indentación, la longitud de las líneas, las
líneas en blanco y la guía de importación de otros paquetes entre otros conceptos.

Reglas de indentación en PEP 8

Python define la lógica de su código utilizando bloques indentados, 
por lo tanto se recomienda indentar usando 4 espacios, dado que los espacios 
ocupan el mismo tamaño en casi todos los tipos de fuente y 4 es un número aceptable 
para la separación visual de los bloques.

Una alternativa común a los espacios son el uso de tabulaciones pero acarrea
 el problema que según se defina el tamaño de las tabulaciones en cada editor,
 el código se verá diferente haciéndolo incluso ilegible, por lo que NO se recomienda su uso.

1 - INDENTACION

def es_par(num):
    if num % 2 == 0:
        return True
    return False

2 - LONGITUD DE LINEAS 

79 caracteres por linea por defecto y para libreria standard
72 caracteres por linea de comentario o documentacion
99 caracteres por line de codigo pero sigue 72 caracteres a fines de 
comentario y documentacion.


3 - POSICION DE LOS OPERADORES
Cuando hay muchos operadores en nuevas lineas, las lineas deben comenzar con el operador.
patas_totales = (num_patas_gato 
                 + num_patas_perro 
                 + num_patas_pato)
    

4 - POSICION DE LINEAS EN BLANCO

Cuando se definen conceptos y lógica en Python, es relevante el uso de líneas en blanco a añadir.

2 líneas en blanco: rodeando a funciones de nivel principal y definición de clases.
1 línea en blanco: definición de métodos dentro de una clase.
1 línea extra: entre bloques lógicos de código diferentes.
1 línea en blanco al final del fichero: todos los módulos en Python deben de terminar 
con una línea en blanco al final de cada módulo si tienen contenido.

control-L (^L): se utiliza para separar páginas aunque algunos editores de texto lo omiten.

Uso de espacios siguiendo reglas del PEP 8CONSTANTE = 'inicio'

def mi_funcion(a):
    return a + 4


class Perro:
    peso = 1.7

    def ladra(self):
        print('guau')

    def come(self):
        if self.peso < 1.5:
            self.peso = 1.9
        else:
            self.peso += 0.2

         print('Guau - que rico!')


5 - IMPORTACION DE CODIGO

Para las importaciones de paquetes existen algunas reglas también.

El uso de import debe de ser en líneas separadas.
El orden de importación es: librería estándar, librerías de terceros, librerías propias o locales.
Las importaciones absolutas son los recomendados.
Los importaciones relativas solo pueden ser explícitas y preferiblemente simples y cortas.
Importaciones usando * (wildcard) deben de ser evitadas.

# Mal
import json, sys

# Bien
import json
import sys

# Bien
from json import dump, load

# importacion absoluta
import pkg.funciones
from pkg import funciones
from pkg.funciones import mi_funcion

# importacion relativa
from . import funciones
from .funciones import mi_funcion

# evitar!
from pkg import * 


6 - VARIABLES DE MODULO
Las variables de módulo definen ciertos aspectos generales:

__all__: define qué objetos se importarán al hacer uso de import *.
__author__: define el autor del módulo.
__version__: define la versión del módulo actual.
Todas estas definiciones han de hacerse al comienzo del módulo, justo debajo del bloque de importaciones.

7 - CADENAS DE CARACTERES 

def mi_funcion():
    """Sección de documentación con triples comillas dobles"""
    pass

a = "Ander's car"  # escapando ' al usar "
cita = 'Iba por "la acera" con el coche'  # escapando " al usar '


8 - ESPACIOS EN BLANCO  

Los espacios en blanco en Python se utilizan para aclarar o 
remarcar partes del código, pero hay que hacer un uso contenido 
de los mismos definiendo las siguientes reglas:

Añadir espacios: entre elementos separados por comas, en los lados de una evaluación operacional, 
en una asignación o separando bloques de operaciones.

Evitar espacios: en slicings, entre los nombres de funciones y la llamada,
 entre las variables y el acceso interno usando [], 
 operaciones logicamente unidas o en parentesis vacios.

# Bien
mi_funcion(param1, [1, 2])

a += 1
i = i + 1
b = a*2 - 1
c = (a+i) * (a-i)

if a == b:
   print(a + 'es igual que' + b)

lst[1:2], lst[4:], lst[5:34:2]
lst[inicio + mid : mid + fin]
lst[inicio::fin]

gato = 1
perro = 2
elefante_marron = 4

# Mal
mi_funcion ( param1, [  1,    2] )

a +=1
i=i+1
b = a * 2 - 1
c = (a + i) * (a - i)

if a==b:
   print (a+'es igual que'          +   b)

lst[ 1:2 ], lst[ 4:], lst[5 : 34 : 2]
lst[inicio + mid:mid + fin]
lst[inicio : : fin]

gato            = 1
perro           = 2
elefante_marron = 4

9 - COMAS FINALES 

El uso de comas al final de una variable debe de hacerse en una nueva línea, 
y hay que recordar que las comas al final de una variable crean tuplas, 
por tanto hacerlas explicitamente es mejor.

# Bien
variable = ('123',)
mi_funcion(param1,
           param2,
           )

# Mal
variable = '123',  # creará una tupla de forma implicita
mi_funcion(param1, param2,)  # la ultima coma sobra
Otra buena razon por la que en listas y tuplas es bueno dejar la coma al final, 
si el lenguaje lo soporta, es para que cuando se editen añadiendo nuevos elementos, 
no se modifica la línea que ya existia, dejando intacto el historial de cambios.

10 - COMENTARIOS

La PEP 8 contempla muchas reglas sobre cómo tratar los comentarios que se pueden ver a continuación:

Los comentarios pueden ser contradictorios, y requieren que se actualicen con el código, 
por tanto si se pueden evitar haciendo código más claro, mejor.
Deben de componerse de frases completas.
Deben de comenzar en mayuscula a no ser que comiencen con el nombre de un identificador, 
el cual se respetará siempre su tamaño.
Los bloques de comentarios se componen de varios parrafos terminados en puntos, 
y terminar en dos espacios en blancos salvo la ultima frase.
Los comentarios deben de ser en Ingles a no ser «que se esté 120%» 
seguro de que se leeran siempre en otro idioma y serán claros.
Los bloques se aplican al código justo despues de donde se encuentran y con la misma indentación.
Los comentarios de línea comienzan con al menos 2 espacios y un # y un espacio después.
Las cadenas de documentacion (docstrings) deben de añadirse en clases, funciones y métodos que sean públicos 
siguiendo el PEP 257.


# Comentario de una línea antes del código principal
def funcion(primer_parametro, segundo_parametro):
    """Docstring para describir qué hace la función


    primer_parametro -- descripcion del primer parámetro
    segundo_parametro -- descripcion del segundo parámetro
    """
    pass


11 - CONVENCIONES DE NOMENCLATURA

Las siguientes reglas aplican para los nombres de cada tipo de objeto.

Caracteres a evitar: o, O, l y L (letra O y letra L) dado que se pueden confundir con un 0 o un 1 
dependiendo del tipo de fuente usada.
Caracteres ASCII: se utilizan en la librería estándar siempre.
Nombre de modulos y paquetes: se escriben en minúsculas y se desaconseja el uso de guiones bajos, 
manteniendo los nombres lo más cortos posibles.
Nombrado de clases: se usan el FormatoCapital, donde la primera letra de cada palabra es mayúscula.
Nombres de tipos de variables: en FormatoCapital.
Excepciones: igual que el de clases pero con el sufijo «Error».
Nombres de variables y funciones: se usan palabras en minúscula separadas por guiones bajos.
Métodos en clases: el primer parámetro para métodos de instancia es self y para métodos de clase cls.
Constantes: en mayúsculas.


from vehiculos import Coche

MAXIMO_AVANZAR = 500

class LimiteDeKilometrosAlcanzadoError(Exception):
    pass

class Saet(Coche):
    posicion = 0

    def avanza(self, num_km):
        nueva_posicion += num_km

        if nueva_posicion > MAXIMO_AVANZAR:
            self.posicion = MAXIMO_AVANZAR
            raise LimiteDeKilometrosAlcanzadoError
        else:
            self.posicion = nueva_posicion